{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorBoard using Colab.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/raahatg21/TensorBoard-Keras-GoogleColab/blob/master/TensorBoard_using_Colab.ipynb)"
      ]
    },
    {
      "metadata": {
        "id": "rOG6117SroYy",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# MNIST Dataset: Using TensorBoard with Google Colab"
      ]
    },
    {
      "metadata": {
        "id": "vUKmZN6srtL9",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "**Classification done on MNIST Dataset. TensorBoard visualisation tool is used inside Google Colab to see live graphs of the model during training and many more things.99.25% Validation Accuracy. 99.36% Testing Accuracy.**"
      ]
    },
    {
      "metadata": {
        "id": "rZS2-paio_ZY",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6d9DyouZryiH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e6af2b6f-7db4-40b0-a6db-3adf26ff17f1"
      },
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "from keras import Input\n",
        "from keras.datasets import mnist\n",
        "from keras.utils import to_categorical\n",
        "from keras import callbacks"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "h-d2rjvkuwDi",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "TensorBoard is implemented in Colab using the library *tensorboardcolab*. \n",
        "\n",
        "In case you don't have it installed, use:\n",
        "\n",
        "\n",
        "```\n",
        "!pip install tensorflowboard\n",
        "```\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "uhqE687Nw84J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "outputId": "d102c934-8015-49a3-b8ed-e4187f50ade7"
      },
      "cell_type": "code",
      "source": [
        "!pip install tensorboardcolab"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting tensorboardcolab\n",
            "  Downloading https://files.pythonhosted.org/packages/73/3d/eaf745e162e471c5bb2737a407d8626fb8684a88cf085045456aeb841d3c/tensorboardcolab-0.0.19.tar.gz\n",
            "Building wheels for collected packages: tensorboardcolab\n",
            "  Running setup.py bdist_wheel for tensorboardcolab ... \u001b[?25l-\b \bdone\n",
            "\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/ab/74/02/cda602d1dc28b2f12eab313c49b9bfa14d6371326bc2590e06\n",
            "Successfully built tensorboardcolab\n",
            "Installing collected packages: tensorboardcolab\n",
            "Successfully installed tensorboardcolab-0.0.19\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "OnxZF4WLsE9-",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import tensorboardcolab"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "jYbYhb9HvQBv",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Now create and object *(tbc)* of the *TensorBoardColab* class. This will be passed as callback argument when training the model down below. It will also include the link to view TensorBoard."
      ]
    },
    {
      "metadata": {
        "id": "xxSOXUpbsJdQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "5e63bf72-a279-46a1-a37b-f943fb751b66"
      },
      "cell_type": "code",
      "source": [
        "tbc = tensorboardcolab.TensorBoardColab()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Wait for 8 seconds...\n",
            "TensorBoard link:\n",
            "http://ee8e1e75.ngrok.io\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Ul4g5ip3sVct",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "759d351c-5d1d-4027-e0f3-31e4da031a53"
      },
      "cell_type": "code",
      "source": [
        "(train_data, train_labels), (test_data, test_labels) = mnist.load_data()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://s3.amazonaws.com/img-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 2s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "YY-cu5zZsiEw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "23141ffc-ca77-411e-ea7d-121d61bc79ef"
      },
      "cell_type": "code",
      "source": [
        "train_data.shape, train_labels.shape"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000, 28, 28), (60000,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "metadata": {
        "id": "lMfk0DXHsorj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "39857670-37a4-4e79-b17a-60b9e16eb2ed"
      },
      "cell_type": "code",
      "source": [
        "test_data.shape, test_labels.shape"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((10000, 28, 28), (10000,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "metadata": {
        "id": "OWBa51Oxsslw",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Preprocessing of Data\n",
        "\n",
        "train_data = train_data.reshape((60000, 28, 28, 1))\n",
        "train_data = train_data.astype('float32')/255\n",
        "\n",
        "test_data = test_data.reshape((10000, 28, 28, 1))\n",
        "test_data = test_data.astype('float32')/255"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "RltEyhTKtFuC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "fbeda557-3d19-4ccd-b683-7a21da6f439e"
      },
      "cell_type": "code",
      "source": [
        "train_data.shape, test_data.shape"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000, 28, 28, 1), (10000, 28, 28, 1))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "metadata": {
        "id": "-7UN0WFItMqZ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Preprocessing the Labels\n",
        "\n",
        "train_labels = to_categorical(train_labels, num_classes = 10)\n",
        "test_labels = to_categorical(test_labels, num_classes = 10)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "sXrExDYItdPf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5b09b451-6f4a-40b7-828a-f5327b1c0310"
      },
      "cell_type": "code",
      "source": [
        "train_labels.shape, test_labels.shape"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000, 10), (10000, 10))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "metadata": {
        "id": "XENph8hTtf2i",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Validation Set Splitting (First 10,000 samples of Training Set)\n",
        "\n",
        "val_data = train_data[:10000]\n",
        "val_labels = train_labels[:10000]\n",
        "\n",
        "train_data = train_data[10000:]\n",
        "train_labels = train_labels[10000:]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "pYUPzbCwt3CG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "fcf99ba0-5f91-4db2-cab6-c70addbfc172"
      },
      "cell_type": "code",
      "source": [
        "train_data.shape, train_labels.shape, val_data.shape, val_labels.shape"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((50000, 28, 28, 1), (50000, 10), (10000, 28, 28, 1), (10000, 10))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "metadata": {
        "id": "isElwXBvvoMw",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Building the Model\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (28, 28, 1)))\n",
        "model.add(layers.MaxPooling2D(2, 2))\n",
        "model.add(layers.Dropout(0.4))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))\n",
        "model.add(layers.MaxPooling2D(2, 2))\n",
        "model.add(layers.Dropout(0.4))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation = 'relu'))\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(128, activation = 'relu'))\n",
        "model.add(layers.Dropout(0.4))\n",
        "model.add(layers.Dense(10, activation = 'softmax'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "sS3ETFb3xnk2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "outputId": "b97e42b5-a3c3-4ce7-b802-9ec2b801a0c1"
      },
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 26, 26, 32)        320       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 13, 13, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 11, 11, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0         \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 5, 5, 64)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 3, 3, 64)          36928     \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 576)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 128)               73856     \n",
            "_________________________________________________________________\n",
            "dropout_3 (Dropout)          (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 10)                1290      \n",
            "=================================================================\n",
            "Total params: 130,890\n",
            "Trainable params: 130,890\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "8H10a5-IxteQ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# Compiling the Model\n",
        "\n",
        "model.compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy', metrics = ['acc'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "A9aGRpJBvmAk",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Pass the *callbacks* argument as: *TensorBoardColabCall(tbc)*.\n",
        "\n",
        "\n",
        "Note that *tbc* was the object declared earlier. Now while the model is still training, head over to the link and you should be able to see live visualisation of your model. You can also see the full flowchart of your model.\n"
      ]
    },
    {
      "metadata": {
        "id": "TSD7fFhdx69b",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 729
        },
        "outputId": "55643e58-b686-4fa0-a03f-f2ae89300e9b"
      },
      "cell_type": "code",
      "source": [
        "# Training\n",
        "\n",
        "history = model.fit(train_data, train_labels, epochs = 20, batch_size = 128, validation_data = (val_data, val_labels), callbacks = [tensorboardcolab.TensorBoardColabCallback(tbc)], verbose = 1)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 50000 samples, validate on 10000 samples\n",
            "Epoch 1/20\n",
            "50000/50000 [==============================] - 7s 149us/step - loss: 0.4230 - acc: 0.8634 - val_loss: 0.0964 - val_acc: 0.9707\n",
            "Epoch 2/20\n",
            "50000/50000 [==============================] - 6s 122us/step - loss: 0.1197 - acc: 0.9636 - val_loss: 0.0637 - val_acc: 0.9802\n",
            "Epoch 3/20\n",
            "50000/50000 [==============================] - 6s 122us/step - loss: 0.0828 - acc: 0.9752 - val_loss: 0.0485 - val_acc: 0.9856\n",
            "Epoch 4/20\n",
            "50000/50000 [==============================] - 6s 119us/step - loss: 0.0654 - acc: 0.9800 - val_loss: 0.0446 - val_acc: 0.9870\n",
            "Epoch 5/20\n",
            "50000/50000 [==============================] - 6s 122us/step - loss: 0.0574 - acc: 0.9820 - val_loss: 0.0416 - val_acc: 0.9873\n",
            "Epoch 6/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0547 - acc: 0.9832 - val_loss: 0.0347 - val_acc: 0.9911\n",
            "Epoch 7/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0481 - acc: 0.9853 - val_loss: 0.0371 - val_acc: 0.9889\n",
            "Epoch 8/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0431 - acc: 0.9869 - val_loss: 0.0365 - val_acc: 0.9891\n",
            "Epoch 9/20\n",
            "50000/50000 [==============================] - 6s 120us/step - loss: 0.0407 - acc: 0.9870 - val_loss: 0.0365 - val_acc: 0.9902\n",
            "Epoch 10/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0403 - acc: 0.9875 - val_loss: 0.0337 - val_acc: 0.9908\n",
            "Epoch 11/20\n",
            "50000/50000 [==============================] - 6s 122us/step - loss: 0.0365 - acc: 0.9889 - val_loss: 0.0319 - val_acc: 0.9907\n",
            "Epoch 12/20\n",
            "50000/50000 [==============================] - 6s 122us/step - loss: 0.0377 - acc: 0.9888 - val_loss: 0.0347 - val_acc: 0.9906\n",
            "Epoch 13/20\n",
            "50000/50000 [==============================] - 6s 122us/step - loss: 0.0390 - acc: 0.9884 - val_loss: 0.0300 - val_acc: 0.9921\n",
            "Epoch 14/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0376 - acc: 0.9893 - val_loss: 0.0323 - val_acc: 0.9909\n",
            "Epoch 15/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0355 - acc: 0.9895 - val_loss: 0.0340 - val_acc: 0.9908\n",
            "Epoch 16/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0371 - acc: 0.9897 - val_loss: 0.0326 - val_acc: 0.9916\n",
            "Epoch 17/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0366 - acc: 0.9895 - val_loss: 0.0296 - val_acc: 0.9925\n",
            "Epoch 18/20\n",
            "50000/50000 [==============================] - 6s 120us/step - loss: 0.0382 - acc: 0.9896 - val_loss: 0.0315 - val_acc: 0.9909\n",
            "Epoch 19/20\n",
            "50000/50000 [==============================] - 6s 121us/step - loss: 0.0371 - acc: 0.9899 - val_loss: 0.0349 - val_acc: 0.9907\n",
            "Epoch 20/20\n",
            "50000/50000 [==============================] - 6s 120us/step - loss: 0.0354 - acc: 0.9898 - val_loss: 0.0333 - val_acc: 0.9918\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "LLuesbTAyGuR",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "td8DjhApzH2h",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 361
        },
        "outputId": "123ac292-bf7b-438f-8de8-25fe07316430"
      },
      "cell_type": "code",
      "source": [
        "# Plotting Training and Validation Loss\n",
        "\n",
        "epochs = range(1, len(acc) + 1)\n",
        "\n",
        "plt.plot(epochs, loss, 'ko', label = 'Training Loss')\n",
        "plt.plot(epochs, val_loss, 'k', label = 'Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\ncZfQ9SrEAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f854d3626a0>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "zJPnF75WzJqj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 361
        },
        "outputId": "2da977be-51f7-40f3-e79d-9c53e8cf3198"
      },
      "cell_type": "code",
      "source": [
        "# Plotting Training and Validation Accuracy\n",
        "\n",
        "\n",
        "plt.plot(epochs, acc, 'yo', label = 'Training Accuracy')\n",
        "plt.plot(epochs, val_acc, 'y', label = 'Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nCsaM+SOvvvoy//jHSkpLy3jkkUQSEhKZNm0ykyZNoaCggLy83DMKdNDmd6DprzcsItLSxcVdyYYN\n5Zvg//vf/+OSSy4HICIigkWLHmbatMl89dWX5OXlVrv8oUOH6N37bADvhU7Cwtrw7bffMmXKeB55\nZF6NywLs3Pk9Awf+CoBBgwbz4487AYiO7kLbtu2wWCy0a+eocg33r7/eSvv2HejQoQOXXRbHJ5/8\nH06nkx9+2MG5557nrWfSpCnVTqtN377lbzrs9rb861//5I47JvHmmyvIyclh9+7/0bVrd4KCggkL\nC2Phwidp0yaczp27snPnDjZt+oRLL42tdf31oZE6TX+9YRGRxtKhw8O1jqp95eKLL+W115YRF/db\nunTpSps2bQB49NH5PP74U3Tv3oMnn1xU4/IVL6F64sSmH3ywjtzcXJ577mXy8vKYOPGWWiowvMuV\nlTkxjPL1nXo511NPmvrBB+v4+edD/PGPNwFQXFzM559/hsVixeOpvH+9umm1XZo1IKA8UpcuXcKv\nfz2Ua6+9gdTU9WzdurnadUH5xWFSU9fz88+H+NOf7qil3/rRSJ2aryvsq+sNi4i0dCEhrenZszev\nvfZKpeuEFxYW0L59B/Lz89m69csaL7farp2DvXt34/F4+OqrL4Hyy7V27twZi8XCRx9t9C5rGAYu\nl6vS8n379mPr1i8A+PrrL+nTp2+dNZeVlfHf/37svSzrq6+u4J577mP9+pRK6/vhhx0sXryo2mmt\nW7cmKysTKD8qv6ioqMrvyckpvzSrx+Phk08+oqysjG7durN37x6KioooKSlh+vSpeDwehg0bzrZt\nWykoyKdjx0519lAXjdQpv95wxX3qJ6f79nrDIiItWVzclTz8cCKJifO90/7f/7uRKVMm0KVLV26+\neRzLlr3I5MlTqyw7efJUHnjgfjp06Oi9KMsll1zGnDl/5vPPv2TkyD8QFRXFK6+8xHnnDeSppx6v\ntG9+4sTbefTR+fznP//GZgtg9uy5lUbN1fnss/8yYMB5hIdHeKddemksL774d2bOfIBu3XowdepE\nAGbMmEXPnr34+OOPKk3r0eMsgoNbcfvt4zn33PPo0KFqEF9zzf/jr399nA4dOnHDDaN54okFfPvt\nNiZMuJ3p08sfi9Gjb8IwDAICAujWrQfnnFP3m5L60AVdjis/+r1przdcHTNezADM2Zd6ajnM2JcZ\newJz9lVbTyUlJdxxxySeeurvhIaG1nt9NfHpSH3BggVs27YNwzBISEhgwIAB3nnLly9n7dq1WCwW\n+vfvz5w5cwBYunQpa9euxWazkZiYWGkZXwoPv0FHuouISJPZvv1bHn98ATfddEu9A70uPgv1LVu2\nsGfPHpKSkkhPTychIYGkpCQACgoKWLp0Ke+//z42m43x48fz9ddf07p1a9555x1Wr17Nzp072bBh\nQ5OFuoiISFPq3/9c/vGPlY26Tp+F+qZNm4iNLT88v2fPnuTm5lJQUEBoaCgBAQEEBARQVFRESEgI\nx44dIzw8nA8++ICrrroKm81GTEwMMTExvipPRETEdHwW6pmZmZVC2W63k5GRQWhoKEFBQdxxxx3E\nxsYSFBTEyJEj6dGjBwcOHMBqtTJhwgScTiezZ8+mT5/aj0CPjAzBZrPW+jMtTW37S1oyM/alnloO\nM/Zlxp7AnH01VU9NdvR7xePxCgoKWLJkCevWrSM0NJRbb72VHTt24PF4cLlcvPzyy3z55ZfMmTOH\n1atX17re7OyqHydoycx4kAiYsy/11HKYsS8z9gTm7Kuxe/LLgXJRUVFkZmZ67x85cgSHwwFAeno6\nXbp0wW63AzB48GC2b99Ou3btOOusszAMg8GDB3PgwAFflSciImI6Pjv5zPDhw0lJSQEgLS2NqKgo\n79F90dHRpKenU1xcfvm87du30717dy666CI++eQToDz4O3bs6KvyRERETMdnI/VBgwYRExNDfHw8\nhmGQmJhIcnIyYWFhxMXFMWHCBMaNG4fVamXgwIEMHlx+lZz/+7//Y/To0QA8+OCDvipPRETEdHTy\nmWbGjPuTwJx9qaeWw4x9mbEnMGdfTblPXed+FxERMYkWP1IXERGRchqpi4iImIRCXURExCQU6iIi\nIiahUBcRETEJhbqIiIhJKNRFRERMosku6CJVPfbYY3z55Zc4nU7+9Kc/ccUVV3jnXXbZZXTo0AGr\ntfwKdE888QTt27f3V6n1snnzZu6++2569+4NwNlnn83cuXO98z/99FOefPJJrFYrF110EXfccYe/\nSq23f/3rX6xdu9Z7f/v27Xz11Vfe+zExMQwaNMh7/9VXX/U+Z83RDz/8wNSpU/njH//I2LFjOXTo\nEDNnzsTlcuFwOHj88ccJDAystMyCBQvYtm0bhmGQkJDAgAED/FR9zarra/bs2TidTmw2G48//rj3\n2hNQ999qc3BqT7NmzSItLY2IiAgAJkyYwCWXXFJpmZb4XN11111kZ2cDkJOTw/nnn8/8+fO9P5+c\nnMzTTz9N165dAfjNb37DlClT/FJ7TU59LT/33HP993/lEb/YtGmTZ+LEiR6Px+M5evSo5+KLL640\n/9JLL/UUFBT4obLT99lnn3nuvPPOGudfddVVnoMHD3pcLpdnzJgxnh9//LEJqztzmzdv9sybN6/S\ntCFDhvipmoYrLCz0jB071vPAAw94Xn/9dY/H4/HMmjXL8+6773o8Ho9n8eLFnuXLl1daZvPmzZ7J\nkyd7PB6PZ9euXZ5Ro0Y1bdH1UF1fM2fO9Lzzzjsej8fjeeONNzyLFi2qtExdf6v+Vl1P999/v2fj\nxo01LtNSn6uKZs2a5dm2bVulaatXr/YsXLiwqUpssOpey/35f6XN735ywQUX8PTTTwPQpk0bjh07\nhsvl8nNVvrNv3z7Cw8Pp2LEjFouFiy++mE2bNvm7rAZ57rnnmDp1qr/LOG2BgYG89NJLREVFeadt\n3ryZyy+/HIBLL720ynOyadMmYmNjAejZsye5ubkUFBQ0XdH1UF1fiYmJ/Pa3vwUgMjKSnJwcf5V3\nWqrrqS4t9bk64aeffiI/P79Zbl2oTXWv5f78v1Ko+4nVaiUkJASAVatWcdFFF1XZbJuYmMiYMWN4\n4oknKl2PvjnbtWsXt99+O2PGjOG///2vd3pGRob3UrsAdrudjIwMf5R4Wr755hs6duxYaRMuQGlp\nKTNmzCA+Pp5XXnnFT9XVj81mIzg4uNK0Y8eOeTcLtm3btspzkpmZSWRkpPd+c3zequsrJCQEq9WK\ny+VixYoV/P73v6+yXE1/q81BdT0BvPHGG4wbN4577rmHo0ePVprXUp+rE1577TXGjh1b7bwtW7Yw\nYcIEbr31Vr777jtflthg1b2W+/P/SvvU/Wz9+vWsWrWKZcuWVZp+1113ceGFFxIeHs4dd9xBSkoK\nV155pZ+qrJ/u3bszbdo0rrrqKvbt28e4ceN4//33q+xLaolWrVrFddddV2X6zJkz+cMf/oBhGIwd\nO5bBgwdz7rnn+qHCM1efN44t5c0lgMvlYubMmQwdOpRhw4ZVmtcS/1avueYaIiIi6Nu3Ly+++CLP\nPvtsrVeybEnPVWlpKV9++SXz5s2rMu+8887DbrdzySWX8NVXX3H//ffzn//8p+mLrEPF1/KKx0c1\n9f+VRup+9PHHH/PCCy/w0ksvERZW+ao71157LW3btsVms3HRRRfxww8/+KnK+mvfvj1XX301hmHQ\ntWtX2rVrx+HDhwGIiooiMzPT+7OHDx9u0KZFf9u8eTMDBw6sMn3MmDG0bt2akJAQhg4d2iKep4pC\nQkIoLi4Gqn9OTn3ejhw5UmVrRXM1e/ZsunXrxrRp06rMq+1vtbkaNmwYffv2BcoPpD31b60lP1ef\nf/55jZvde/bs6T0gcODAgRw9erTZ7ao89bXcn/9XCnU/yc/P57HHHmPJkiXeo1krzpswYQKlpaVA\n+R/8iaN0m7O1a9eydOlSoHxze1ZWlveI/c6dO1NQUMD+/ftxOp2kpqYyfPhwf5Zbb4cPH6Z169ZV\nRnE//fQTM2bMwOPx4HQ62bp1a4t4nir6zW9+Q0pKCgDvv/8+F154YaX5w4cP985PS0sjKiqK0NDQ\nJq+zodauXUtAQAB33XVXjfNr+lttru6880727dsHlL/JPPVvraU+VwDffvstffr0qXbeSy+9xNtv\nvw2UHzlvt9ub1SdMqnst9+f/lTa/+8m7775LdnY206dP90779a9/zTnnnENcXBwXXXQRo0ePJigo\niH79+jX7Te9QPnr485//zIYNGygrK2PevHm8/fbbhIWFERcXx7x585gxYwYAV199NT169PBzxfVz\n6vEAL774IhdccAEDBw6kQ4cO3HDDDVgsFi677LJmfZDP9u3bWbRoEQcOHMBms5GSksITTzzBrFmz\nSEpKolOnTlx77bUA3HPPPTz66KMMGjSImJgY4uPjMQyDxMREP3dRVXV9ZWVlERQUxC233AKUj/bm\nzZvn7au6v9XmtOm9up7Gjh3L9OnTadWqFSEhITz66KNAy3+unnnmGTIyMrwfWTthypQpPP/88/z+\n97/nvvvu45///CdOp5NHHnnET9VXr7rX8oULF/LAAw/45f9Kl14VERExCW1+FxERMQmFuoiIiEko\n1EVERExCoS4iImISCnURERGT0EfaRH6B9u/fz5VXXlnlhDoXX3wxEydOPOP1b968maeeeoqVK1ee\n8bpEpP4U6iK/UHa7nddff93fZYhII1Koi0gl/fr1Y+rUqWzevJnCwkIWLlzI2WefzbZt21i4cCE2\nmw3DMHjwwQfp1asXu3fvZu7cubjdboKCgrwnRXG73SQmJvL9998TGBjIkiVLAJgxYwZ5eXk4nU4u\nvfTSZndtbJGWTPvURaQSl8tF7969ef311xkzZgx/+9vfgPKL18yePZvXX3+d2267jYceeggov5rg\nhAkTWL58Oddffz3vvfceAOnp6dx55528+eab2Gw2PvnkEz799FOcTicrVqzgn//8JyEhIbjdbr/1\nKmI2GqmL/EIdPXrUexrVE+677z4ARowYAcCgQYNYunQpeXl5ZGVleU+DO2TIEO69916g/LK0Q4YM\nAWDkyJFA+T71s846i3bt2gHQoUMH8vLyuOyyy/jb3/7G3XffzcUXX8yNN96IxaKxhUhjUaiL/ELV\ntk+94tmjDcPAMIwa5wPVjraru+hG27Zteeutt/jqq6/YsGED119/PWvWrKnxGtsi0jB6iywiVXz2\n2WcAfPnll5xzzjmEhYXhcDjYtm0bAJs2beL8888HykfzH3/8MVB+cYsnn3yyxvV+8sknfPjhh/zq\nV79i5syZhISEkJWV5eNuRH45NFIX+YWqbvN7586dAfjuu+9YuXIlubm5LFq0CIBFixaxcOFCrFYr\nFouFefPmATB37lzmzp3LihUrsNlsLFiwgL1791b7O3v06MGsWbN4+eWXsVqtjBgxgujoaN81KfIL\no6u0iUgl55xzDmlpadhses8v0tJo87uIiIhJaKQuIiJiEhqpi4iImIRCXURExCQU6iIiIiahUBcR\nETEJhbqIiIhJKNRFRERM4v8DYaFdhdozvFoAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f854d31f3c8>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "y_q-NBQuzLh2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "ef4f9216-7650-4e79-8c10-e7e44f72b244"
      },
      "cell_type": "code",
      "source": [
        "# Evaluating on Test Data\n",
        "\n",
        "test_loss, test_acc = model.evaluate(test_data, test_labels)\n",
        "test_loss, test_acc"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10000/10000 [==============================] - 1s 104us/step\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.02534027968061273, 0.9936)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    }
  ]
}
